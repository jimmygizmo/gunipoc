
(ve.gunipoc) ➜  gunipoc git:(main) ✗
(ve.gunipoc) ➜  gunipoc git:(main) ✗  docker-compose exec web python manage.py create_db
(ve.gunipoc) ➜  gunipoc git:(main) ✗
(ve.gunipoc) ➜  gunipoc git:(main) ✗ docker-compose exec db psql --username=hello_flask --dbname=hello_flask_dev
psql (13.7)
Type "help" for help.

hello_flask_dev=# \Z
invalid command \Z
Try \? for help.
hello_flask_dev=# \z
                                  Access privileges
 Schema |     Name     |   Type   | Access privileges | Column privileges | Policies
--------+--------------+----------+-------------------+-------------------+----------
 public | users        | table    |                   |                   |
 public | users_id_seq | sequence |                   |                   |
(2 rows)

hello_flask_dev=# \c hello_flask_dev
You are now connected to database "hello_flask_dev" as user "hello_flask".
hello_flask_dev=# \dt
          List of relations
 Schema | Name  | Type  |    Owner
--------+-------+-------+-------------
 public | users | table | hello_flask
(1 row)

hello_flask_dev=# SELECT * FROM USERS;
 id | email | active
----+-------+--------
(0 rows)

hello_flask_dev=#

SO FAR LOOKS GOOD, BUT WE ARE CURRENTLY DEBUGGING WHY I GET THIS ERROR WHEN I TRY seed_db:
------------------------------------------
(ve.gunipoc) ➜  web git:(main) ✗ docker-compose exec web python manage.py seed_db
Traceback (most recent call last):
  File "/usr/src/app/manage.py", line 29, in <module>
    cli()
  File "/usr/local/lib/python3.9/site-packages/click/core.py", line 1130, in __call__
    return self.main(*args, **kwargs)
  File "/usr/local/lib/python3.9/site-packages/flask/cli.py", line 579, in main
    return super().main(*args, **kwargs)
  File "/usr/local/lib/python3.9/site-packages/click/core.py", line 1055, in main
    rv = self.invoke(ctx)
  File "/usr/local/lib/python3.9/site-packages/click/core.py", line 1657, in invoke
    return _process_result(sub_ctx.command.invoke(sub_ctx))
  File "/usr/local/lib/python3.9/site-packages/click/core.py", line 1404, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File "/usr/local/lib/python3.9/site-packages/click/core.py", line 760, in invoke
    return __callback(*args, **kwargs)
  File "/usr/local/lib/python3.9/site-packages/click/decorators.py", line 26, in new_func
    return f(get_current_context(), *args, **kwargs)
  File "/usr/local/lib/python3.9/site-packages/flask/cli.py", line 427, in decorator
    return __ctx.invoke(f, *args, **kwargs)
  File "/usr/local/lib/python3.9/site-packages/click/core.py", line 760, in invoke
    return __callback(*args, **kwargs)
  File "/usr/src/app/manage.py", line 21, in seed_db
    db.session.add(User(email="user@example.com"))
NameError: name 'User' is not defined
---------------------------------------------

 I added this new db_debug2() method

---- ---- ---- ----
#### DEBUG 2
# Adding the following to try to inspect the DB/tables from here
from sqlalchemy import create_engine
engine = create_engine("postgresql://hello_flask:hello_flask@db:5432/hello_flask_dev")
from sqlalchemy import inspect
inspector = inspect(engine)
####

@cli.command("db_debug2")
def db_debug2():
    print(inspector.get_table_names())
    for table_name in inspector.get_table_names():
        print("Table: %s" % table_name)
        for column in inspector.get_columns(table_name):
            print("  Column: %s" % column['name'])
        print()

---- ---- ---- ----

Well the Users table looks good, but of course we are accessing it in a slightly different way than the code
throwing the error, but this is good to confirm anyhow.

(ve.gunipoc) ➜  gunipoc git:(main) ✗ docker-compose exec web python manage.py db_debug2
The __main__ section in manage.py just executed. It's not important. I'm just telling you.
Table: users
  Column: id
  Column: email
  Column: active


**!!**!!** IT WAS SIMPLY MISSING THE IMPORT OF USER.
The tutorial code is correct. I simply missed that when typing in code changes. Sometimes it is smarter to just
cut and paste the whole updated chunk of code, but I also like to make it a little harder on myself and type in
individual changes after seeing them. Sometimes you create a bug like this, but you always learn a lot from
fixing any bug, even ones you made during a type or missed item during a tutorial. That is the whole point of a
tutorial, to figure things out in multiple ways and thus really learn the topic. It is better to read through the
code of a tutorial as it changes and understand every little change. Don't just cut and past and rush through it.
Yes you will avoid bugs like I just created (and then fixed .. after much debugging) .. but you might not learn
anything doing it the 'easy' way. Of course if you are under the gun at work, then all bets are off and you have
to get the thing working as fast as humanly possible. :)

 --------------------------------------------

